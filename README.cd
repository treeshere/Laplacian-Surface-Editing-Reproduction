Mesh Editing with Laplacian System
项目概述
本项目实现了一个基于拉普拉斯算子 (Laplacian) 的网格编辑工具，允许用户通过指定边界控制点和操作点来编辑三维网格（如PLY格式的网格）。该程序通过构建网格的图表示，计算随机游走拉普拉斯矩阵（Random Walk Laplacian），并解决一个线性系统来完成网格的形变。修改后的网格可以导出为新的PLY文件，并可以与原始网格进行叠加显示，方便用户进行可视化对比。

功能
从PLY格式的网格文件中加载三维网格模型。
使用控制点和边界点来定义网格编辑区域。
通过计算拉普拉斯矩阵来构建网格编辑的线性系统。
使用约束条件（如边界控制点和操作点）求解线性系统并更新网格顶点。
输出修改后的网格，并支持与原始网格进行可视化叠加。
安装与依赖
该项目使用以下Python库：

numpy：用于数值计算。
scipy：用于线性代数和稀疏矩阵操作。
networkx：用于图论操作和计算网格的图表示。
trimesh：用于加载、操作和导出三维网格。
time：用于时间戳生成和文件命名。
安装依赖
您可以通过pip安装所有必需的依赖：

bash
pip install numpy scipy networkx trimesh

使用方法
1. 准备网格文件
确保你有一个有效的PLY格式的网格文件（例如bunny.ply）。该程序默认从./meshes/bunny.ply加载网格文件，您可以根据需要修改路径。

2. 编辑参数
编辑参数部分，定义控制点和操作点。控制点定义了网格的边界，而操作点则用于对网格进行编辑。修改以下字典以适应您的需求：

python
control_handles = {
    24092: [-0.01134, 0.151374, -0.0242688]  # 操作点的ID和位置
}
boundary_control_points = [15617, 24120, 30216, 11236, 6973]  # 边界控制点的ID

3. 运行程序
直接运行脚本即可进行网格编辑：

bash
python mesh_editing.py

4. 输出文件
程序将编辑后的网格保存为一个新的PLY文件，并使用时间戳命名。例如：

bash
./exports/bunny_20231129124523.ply

5. 可视化结果
程序还会生成一个trimesh场景，其中包含原始网格、编辑后的网格以及控制点和操作点的位置。您可以查看原始网格与编辑后网格的叠加效果，帮助您进行可视化比较。

6. 可选参数
如果您需要更改输出路径或控制点的设置，可以在代码中修改以下部分：

python
mesh = trimesh.load('./meshes/bunny.ply', process=False)
output_filename = './exports/bunny_%s.ply' % (time.strftime("%Y%m%d%H%M%S", time.localtime()) )
您可以根据需要替换文件路径和文件名。

程序结构
mesh_editing.py：主程序文件，包含网格加载、处理和编辑功能,以及用于构建图、计算拉普拉斯矩阵、获取可编辑顶点等功能的辅助函数。
meshes/：包含待编辑的三维网格文件（如bunny.ply）。
exports/：保存编辑后网格的文件夹。

关键算法
1. 图表示和拉普拉斯矩阵
网格被表示为图，其中网格的顶点对应图中的节点，网格的边对应图中的边。拉普拉斯矩阵是计算网格平滑和编辑变形的核心。程序使用随机游走拉普拉斯矩阵（RW-Laplacian）来描述节点之间的关系，并通过该矩阵建立线性系统。

2. 约束条件与线性求解
通过约束边界控制点和操作点，程序将这些约束引入线性系统的构建中。然后，程序使用最小二乘法（least squares）来求解线性系统，更新网格的顶点位置。

3. 可视化与输出
程序通过trimesh库支持3D网格可视化，允许用户查看编辑前后的效果。修改后的网格可以导出为新的PLY文件，方便进一步使用或分析。

注意事项
控制点和边界点的选择：确保控制点和边界点在网格中是有效的（即它们的ID对应实际的网格顶点）。
网格规模：对于较大的网格，求解线性系统可能需要较长的时间。可以尝试对网格进行简化，或使用更高效的求解器。

示例输出
运行程序后，您将看到一个包含原始网格和编辑后网格的3D场景。红色点表示控制点和操作点，蓝色表示原始网格，绿色表示编辑后的网格。

